import Head from "next/head";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import PokemonListContainer from "../container/PokemonListContainer";
import styled from "@emotion/styled";
import Layout from "../container/Layout";
import Header from "../components/Header";
import MainContainer from "../container/MainContainer";
import FixedMainContainer from "../container/FixedMainContainer";
import { useQuery } from "@apollo/client";
import { GET_POKEMONS } from "../graphql/apis";
import { useAppContext } from "../context/state";
import { initializeApollo } from "../lib/apolloClient";
import { extractNumber } from "../lib/helpers/stringHelper";

const restructuredData = (data) => {
    let results = [];
    const keys = Object.keys(data);

    keys.map((k) => {
        results = [...results, data[k]];
    });
    console.log(results);
    // const test = props.data.map((d) => d);
    // props.data &&
    //     props.data.map((d) => {
    //         results = [...results, d];
    //     });
    results.pop();
    const hasil = {
        pokemons: {
            results: results,
        },
    };

    return hasil;
};

export default function Home(props) {
    const state = useAppContext();
    const [data, setData] = useState(restructuredData(props.data));

    // const { loading, error, data } = useQuery(GET_POKEMONS, {
    //     variables: {
    //         limit: 10,
    //         offset: 0,
    //     },
    // });

    useEffect(() => {
        if (data) state.setPokemons(data.pokemons.results);
    }, [data]);
    // console.log(props.data, data);

    // useEffect(() => {
    //     if (data) state.setPokemons(data.pokemons.results);
    // }, [data]);
    return (
        <Layout>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            <Header />
            <MainContainer>
                <FixedMainContainer>
                    {/* <PokemonListContainer data={data} /> */}
                    <PokemonListContainer data={data} />
                </FixedMainContainer>
            </MainContainer>
        </Layout>
    );
}

export async function getStaticProps() {
    const apolloClient = initializeApollo();

    const res = await apolloClient.query({
        query: GET_POKEMONS,
        variables: {
            limit: 10,
            offset: 0,
        },
    });

    return {
        props: {
            data: apolloClient.cache.extract(),
        },
        revalidate: 1,
    };
}
